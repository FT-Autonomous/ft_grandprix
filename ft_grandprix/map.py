from os.path import isdir, join, dirname, basename
from shutil import copytree, rmtree
import sys
import argparse
import json
import em
from .colors import colors
import random

def produce_mjcf(
          template_path = "template/car.em.xml",
          cars_path     = "template/cars.json",
          metadata_path = "rendered/chunks/metadata.json",
          output_dir    = "rendered/",
          rangefinders  = 100,
          head          = None,
          cars          = None
):

    with open(cars_path) as cars_file:
        cars = json.load(cars_file)

    if head:
        cars = cars[:head]

    # Update this to load valid positions from the map
    template_dir = dirname(template_path)
    for index, car in enumerate(cars):
        r = lambda: random.choices(list(range(256)), k=3)
        if car["icon"]:
            existing_icons_dir = join(output_dir, "icons")
            if isdir(existing_icons_dir):
                rmtree(existing_icons_dir)
            copytree(join(template_dir, "icons"), join(output_dir, "icons"))
        for color in "primary", "secondary":
            if car[color] == "random":
                car[color] = random.choices(list(range(256)), k=3)
            elif car[color].startswith("rgb"):
                car[color] = [int(x) for x in car[color][4:-1].split(",")]
            else:
                car[color] = colors[car[color]]
        car["x"] = 4.5 + 5.5 + 0.1 * (index % 3)
        car["y"] = -8.5 + 0.0 + 0.1 * (index % 3)
        car["z"] = 0.1

    mjcf_metadata_path = join(output_dir, "car.json")
    mjcf_path = join(output_dir, "car.xml")
    
    with open(metadata_path) as metadata_file:
         metadata = json.load(metadata_file)
    
    with open(mjcf_path, "w") as mjcf_file:
         with open(template_path) as template_file:
             interpreter = em.Interpreter(output=mjcf_file)
             interpreter.file(
                 template_file,
                 locals={
                     "cars" : cars,
                     "metadata" : metadata,
                     "rangefinders" : rangefinders,
                 })
             interpreter.shutdown()
    
    with open(mjcf_metadata_path, "w") as mjcf_metadata_file:
         mjcf_metadata = {
              "cars" : cars,
              "rangefinders" : rangefinders,
         }
         json.dump(mjcf_metadata, mjcf_metadata_file)

if __name__ == "__main__":
     parser = argparse.ArgumentParser()
     parser.add_argument(
         "--rangefinders",
         help="the number of rangefinders to use",
         dest="rangefinders",
         type=int,
         default=100
     )
     parser.add_argument(
         "--template-path",
         help="the `car.em.xml` file that is to be rendered",
         dest="template_path",
         default="template/car.em.xml"
     )
     parser.add_argument(
         "--metadata-path",
         help="the `metadata.json` file generated by ft_grandprix.chunk",
         dest="metadata_path",
         default="rendered/chunks/metadata.json"
     )
     parser.add_argument(
         "--output-dir",
         help="the folder where the redered `car.xml` and `car.json` should be stored",
         dest="output_dir",
         default="rendered/"
     )
     parser.add_argument(
         "--head",
         help="limit the number of cars used from cars.json",
         dest="head",
         type=int,
     )
     args = parser.parse_args()
     produce_mjcf(**args.__dict__)
